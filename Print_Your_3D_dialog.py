# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PrintYour3DDialog
                                 A QGIS plugin
 With this plugin you could print 3D model from your data.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-02-28
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Szymek Ślęczka
        email                : szymonsleczka7@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsMapLayerProxyModel
from qgis.PyQt.QtWidgets import QFileDialog
from qgis.PyQt.QtCore import pyqtSlot

# import from source code directory
from .src.pySTL import scaleSTL
from .src import create_model

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Print_Your_3D_dialog_base.ui'))


class PrintYour3DDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(PrintYour3DDialog, self).__init__(parent)

        self.stopped = False
        self.plugin_dir = os.path.dirname(__file__)

        self.setupUi(self)



        # Fetch the currently loaded layers
        self.layers = self.cmbSelectLayer.currentLayer()
        self.cmbSelectLayer.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.cmbSelectShape.currentLayer()
        self.cmbSelectShape.setFilters(QgsMapLayerProxyModel.VectorLayer)

        # initialize creator
        self.creator = create_model.Create_model(dlg=self, raster_layer=self.layers)

    # GUI BUTTONS AND OTHER WIDGETS

    # pushbuttons
    @pyqtSlot()
    def on_btnGraph_clicked(self):
        print('clicked graph')
        self.creator.iterator()
        self.stretching()
        self.creator.delaunay()
        self.creator.create_graph()

    @pyqtSlot()
    def on_btnSelectOutput_clicked(self):
        print('Select output file')
        filename, _filter = QFileDialog.getSaveFileName(
            self, "Select   output file ", "", '*.stl')
        self.lineEdit.setText(filename)

    @pyqtSlot()
    def on_btnSave_clicked(self):
        print('clicked save')
        self.creator.iterator()
        self.creator.delaunay()
        self.creator.loading()
        self.creator.saver()

    @pyqtSlot()
    def on_btnScale_clicked(self):  # zmienic nazwe tego przycisku i jego opis w gui
        print('clicked scale')
        # stworzyc slownik do cmbScale i dodawac do niego wartosci z listy additems...
        set_scale = scaleSTL.Scalator(scale_text=self.lineEdit, cmbScale=self.cmbScale)
        set_scale.scaleSTL()

    @pyqtSlot()
    def on_btnShape_clicked(self):
        print('clicked generate shape')
        self.creator.shape(self.plugin_dir)

    # source code methods

    def stretching(self):
        if self.stopped == False:
            self.creator.stretching()
            self.stopped = True
        return self.stopped

    def trash_remover(self):  # to jest chyba cale do poprawienia, bo nie usuwalo plikow tymczasowych
        trash_path = self.plugin_dir + '/trash'
        for file in os.listdir(trash_path):
            if file == 'merged.tif':
                pass
            else:
                os.remove(trash_path + '\\' + f'{file}')
